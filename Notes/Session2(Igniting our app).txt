1. What is NPM?
A. npm is worlds largets code registry to share javascript code. 
   Open source developers from every continent use npm to share and borrow packages, 
   and many organizations use npm to manage private development as well.


2. What is Parcel/Webpack? Why do we need it?
A. Parcel and webpack are the bundlers used mostly for JavaScript or Typescript code 
   that helps you to minify, clean, and make your code compact so that it becomes easier to send a request or receive the response from the server when it usually takes you to transfer multiple files without using any bundler for loading the page of your application.


3. What is .parcel-cache?
A. stores information about your project when parcel builds it, 
   so that when it rebuilds, it doesn't have to re-parse and re-analyze everything from scratch. 
   It's a key reason why parcel can be so fast in development mode.


4. What is npx?
A. Node Package Execute. comes with npm above 5.2.0. It is an npm package runner 
   that can execute any package that you want from the npm registry without even installing that package


5. Difference between dependencies and devDependencies
A. A dependency is a library that a project needs to function effectively.
   DevDependencies are the packages a developer needs during development. 
   A peer dependency specifies that our package is compatible with a particular version of an npm package. - used when we publish our own package


6. What is tree shaking?
A. Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code
   It relies on the import and export statements to detect if code modules are exported and imported for use between JavaScript files.


7. What is HMR?
A. Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload. This can significantly speed up development in a few ways: Retain application state which is lost during a full reload. Save valuable development time by only updating what's changed.


8. List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.
A. HMR, Tree Shaking, HTTPS support on dev, optimization, caching, File watcher algorithm, Minify,
   Bundle, Code Cleanup, compression, port no management, zero config bundler, consistent hashing algorithm etc.


9. What is `.gitignore`? What should we add and not add into it?
A. A place to specify which files to ignore while pusing code to server. Anything that can be autogenerated can be put into gitignore file.


10. What is the difference between `package.json` and `package-lock.json`
A. package.json - is a versioning file used to install multiple packages in your project.
   package.lock.json is created for locking the dependency with the installed version.


11. Why should I not modify `package-lock.json`?
A.  It is autogenerated on npm install. You should avoid updating the package. json manually since it could break the synchronization between package. json and package-lock


12. What is `node_modules` ? Is it a good idea to push that on git?
A. Not good idea to push it on git.
   The node_modules folder is used to save all downloaded packages from npm in your computer for the JavaScript project that you have
It just a directory created by npm and a way of tracking each packages you install locally via package.json


13. What is the `dist` folder?
A. contains the minimized version of the source code.The code present in the /dist folder is actually the code which is used on production web applications. Along with the minified code, the /dist folder also comprises of all the compiled modules that may or may not be used with other systems.
 - "The shortform dist stands for distributable and refers to a directory where files will be stored that can be directly used by others without the need to compile or minify the source code that is being reused."


14. What is `browserlists
A. Browserslist is a tool that allows specifying which browsers should be supported in your frontend app by specifying "queries" in a config file.


15. script type
A. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type
 - module
 -importmap
 -''

16. ~version “Approximately equivalent to version”, will update you to all future patch versions, without incrementing the minor version. ~1.2.3 will use releases from 1.2.3 to <1.3.0.

^version “Compatible with version”, will update you to all future minor/patch versions, without incrementing the major version. ^2.3.4 will use releases from 2.3.4 to <3.0.0.

17. 